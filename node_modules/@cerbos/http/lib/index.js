"use strict";
/**
 * Client library for interacting with the Cerbos policy decision point service over HTTP from browser-based applications.
 *
 * @packageDocumentation
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HTTP = void 0;
const qs_1 = require("qs");
const core_1 = require("@cerbos/core");
const request_1 = require("./protobuf/cerbos/request/v1/request");
const response_1 = require("./protobuf/cerbos/response/v1/response");
// eslint-disable-next-line @typescript-eslint/no-var-requires -- Can't import package.json because it is outside of the project's rootDir
const { version } = require("../package.json");
const defaultUserAgent = `cerbos-sdk-javascript-http/${version}`;
/**
 * A client for interacting with the Cerbos policy decision point server over HTTP.
 *
 * @remarks
 * This is primarily intended for use in browsers, and requires `fetch` to be available globally.
 * If you're targeting {@link https://caniuse.com/fetch | old browsers}, you'll need to apply {@link https://www.npmjs.com/package/whatwg-fetch | a polyfill}.
 *
 * You can use it in server-side Node.js applications, but the {@link @cerbos/grpc#GRPC | gRPC client} might be more appropriate.
 *
 * See {@link @cerbos/core#Client | the parent class} for available methods.
 *
 * @public
 */
class HTTP extends core_1.Client {
    /**
     * Create a client for interacting with the Cerbos policy decision point (PDP) server over HTTP.
     *
     * @param baseUrl - base Cerbos PDP server URL (the Cerbos REST API must be available at `${baseUrl}/api/`).
     * @param options - additional client settings.
     *
     * @example
     * Connect via HTTP:
     *
     * ```typescript
     * const cerbos = new HTTP("http://localhost:3592");
     * ```
     *
     * @example
     * Connect to the hosted demo PDP to experiment {@link https://play.cerbos.dev | in the playground}:
     *
     * ```typescript
     * const cerbos = new HTTP("https://demo-pdp.cerbos.cloud", { playgroundInstance: "gE623b0180QlsG5a4QIN6UOZ6f3iSFW2" });
     * ```
     */
    constructor(baseUrl, options = {}) {
        const userAgent = `${options.userAgent ? `${options.userAgent} ` : ""}${defaultUserAgent}`;
        super(async (service, rpc, request, headers, abortHandler) => {
            const { method, path, requestType, responseType, serializeRequest } = services[service][rpc]; // https://github.com/microsoft/TypeScript/issues/30581
            headers.set("User-Agent", userAgent);
            let url = baseUrl + path;
            const init = { method, headers };
            const requestProtobuf = requestType.toJSON(request);
            switch (serializeRequest) {
                case "body":
                    init.body = JSON.stringify(requestProtobuf);
                    break;
                case "query":
                    url += `?${(0, qs_1.stringify)(requestProtobuf, { indices: false })}`;
                    break;
            }
            if (abortHandler.signal) {
                init.signal = abortHandler.signal;
            }
            let response;
            try {
                response = await fetch(url, init);
            }
            catch (error) {
                abortHandler.throwIfAborted();
                throw new core_1.NotOK(core_1.Status.UNKNOWN, error instanceof Error
                    ? `Request failed: ${error.message}`
                    : "Request failed", { cause: error });
            }
            if (!response.ok) {
                throw core_1.NotOK.fromJSON(await response.text());
            }
            return responseType.fromJSON(await response.json());
        }, options);
    }
}
exports.HTTP = HTTP;
const services = {
    admin: {
        addOrUpdatePolicy: {
            method: "POST",
            path: "/admin/policy",
            requestType: request_1.AddOrUpdatePolicyRequest,
            responseType: response_1.AddOrUpdatePolicyResponse,
            serializeRequest: "body",
        },
        addOrUpdateSchema: {
            method: "POST",
            path: "/admin/schema",
            requestType: request_1.AddOrUpdateSchemaRequest,
            responseType: response_1.AddOrUpdateSchemaResponse,
            serializeRequest: "body",
        },
        deleteSchema: {
            method: "DELETE",
            path: "/admin/schema",
            requestType: request_1.DeleteSchemaRequest,
            responseType: response_1.DeleteSchemaResponse,
            serializeRequest: "query",
        },
        disablePolicy: {
            method: "DELETE",
            path: "/admin/policy",
            requestType: request_1.DisablePolicyRequest,
            responseType: response_1.DisablePolicyResponse,
            serializeRequest: "query",
        },
        enablePolicy: {
            method: "POST",
            path: "/admin/policy/enable",
            requestType: request_1.EnablePolicyRequest,
            responseType: response_1.EnablePolicyResponse,
            serializeRequest: "query",
        },
        getPolicy: {
            method: "GET",
            path: "/admin/policy",
            requestType: request_1.GetPolicyRequest,
            responseType: response_1.GetPolicyResponse,
            serializeRequest: "query",
        },
        getSchema: {
            method: "GET",
            path: "/admin/schema",
            requestType: request_1.GetSchemaRequest,
            responseType: response_1.GetSchemaResponse,
            serializeRequest: "query",
        },
        listPolicies: {
            method: "GET",
            path: "/admin/policies",
            requestType: request_1.ListPoliciesRequest,
            responseType: response_1.ListPoliciesResponse,
            serializeRequest: "query",
        },
        listSchemas: {
            method: "GET",
            path: "/admin/schemas",
            requestType: request_1.ListSchemasRequest,
            responseType: response_1.ListSchemasResponse,
            serializeRequest: "query",
        },
        reloadStore: {
            method: "GET",
            path: "/admin/store/reload",
            requestType: request_1.ReloadStoreRequest,
            responseType: response_1.ReloadStoreResponse,
            serializeRequest: "query",
        },
    },
    cerbos: {
        checkResources: {
            method: "POST",
            path: "/api/check/resources",
            requestType: request_1.CheckResourcesRequest,
            responseType: response_1.CheckResourcesResponse,
            serializeRequest: "body",
        },
        planResources: {
            method: "POST",
            path: "/api/plan/resources",
            requestType: request_1.PlanResourcesRequest,
            responseType: response_1.PlanResourcesResponse,
            serializeRequest: "body",
        },
        serverInfo: {
            method: "GET",
            path: "/api/server_info",
            requestType: request_1.ServerInfoRequest,
            responseType: response_1.ServerInfoResponse,
            serializeRequest: "query",
        },
    },
};
//# sourceMappingURL=index.js.map