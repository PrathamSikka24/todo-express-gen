import { Effect } from "../../effect/v1/effect";
import { ValidationError } from "../../schema/v1/schema";
export declare const protobufPackage = "cerbos.engine.v1";
export interface PlanResourcesInput {
    requestId: string;
    action: string;
    principal: Principal | undefined;
    resource: PlanResourcesInput_Resource | undefined;
    auxData: AuxData | undefined;
    includeMeta: boolean;
}
export interface PlanResourcesInput_Resource {
    kind: string;
    attr: {
        [key: string]: any | undefined;
    };
    policyVersion: string;
    scope: string;
}
export interface PlanResourcesInput_Resource_AttrEntry {
    key: string;
    value: any | undefined;
}
export interface PlanResourcesFilter {
    kind: PlanResourcesFilter_Kind;
    condition: PlanResourcesFilter_Expression_Operand | undefined;
}
export declare enum PlanResourcesFilter_Kind {
    KIND_UNSPECIFIED = 0,
    KIND_ALWAYS_ALLOWED = 1,
    KIND_ALWAYS_DENIED = 2,
    KIND_CONDITIONAL = 3
}
export declare function planResourcesFilter_KindFromJSON(object: any): PlanResourcesFilter_Kind;
export declare function planResourcesFilter_KindToJSON(object: PlanResourcesFilter_Kind): string;
export interface PlanResourcesFilter_Expression {
    operator: string;
    operands: PlanResourcesFilter_Expression_Operand[];
}
export interface PlanResourcesFilter_Expression_Operand {
    node?: {
        $case: "value";
        value: any | undefined;
    } | {
        $case: "expression";
        expression: PlanResourcesFilter_Expression;
    } | {
        $case: "variable";
        variable: string;
    } | undefined;
}
export interface PlanResourcesOutput {
    requestId: string;
    action: string;
    kind: string;
    policyVersion: string;
    scope: string;
    filter: PlanResourcesFilter | undefined;
    filterDebug: string;
    validationErrors: ValidationError[];
}
export interface CheckInput {
    requestId: string;
    resource: Resource | undefined;
    principal: Principal | undefined;
    actions: string[];
    auxData: AuxData | undefined;
}
export interface CheckOutput {
    requestId: string;
    resourceId: string;
    actions: {
        [key: string]: CheckOutput_ActionEffect;
    };
    effectiveDerivedRoles: string[];
    validationErrors: ValidationError[];
    outputs: OutputEntry[];
}
export interface CheckOutput_ActionEffect {
    effect: Effect;
    policy: string;
    scope: string;
}
export interface CheckOutput_ActionsEntry {
    key: string;
    value: CheckOutput_ActionEffect | undefined;
}
export interface OutputEntry {
    src: string;
    val: any | undefined;
}
export interface Resource {
    kind: string;
    policyVersion: string;
    id: string;
    attr: {
        [key: string]: any | undefined;
    };
    scope: string;
}
export interface Resource_AttrEntry {
    key: string;
    value: any | undefined;
}
export interface Principal {
    id: string;
    policyVersion: string;
    roles: string[];
    attr: {
        [key: string]: any | undefined;
    };
    scope: string;
}
export interface Principal_AttrEntry {
    key: string;
    value: any | undefined;
}
export interface AuxData {
    jwt: {
        [key: string]: any | undefined;
    };
}
export interface AuxData_JwtEntry {
    key: string;
    value: any | undefined;
}
export declare const PlanResourcesInput: {
    fromJSON(object: any): PlanResourcesInput;
    toJSON(message: PlanResourcesInput): unknown;
};
export declare const PlanResourcesInput_Resource: {
    fromJSON(object: any): PlanResourcesInput_Resource;
    toJSON(message: PlanResourcesInput_Resource): unknown;
};
export declare const PlanResourcesInput_Resource_AttrEntry: {
    fromJSON(object: any): PlanResourcesInput_Resource_AttrEntry;
    toJSON(message: PlanResourcesInput_Resource_AttrEntry): unknown;
};
export declare const PlanResourcesFilter: {
    fromJSON(object: any): PlanResourcesFilter;
    toJSON(message: PlanResourcesFilter): unknown;
};
export declare const PlanResourcesFilter_Expression: {
    fromJSON(object: any): PlanResourcesFilter_Expression;
    toJSON(message: PlanResourcesFilter_Expression): unknown;
};
export declare const PlanResourcesFilter_Expression_Operand: {
    fromJSON(object: any): PlanResourcesFilter_Expression_Operand;
    toJSON(message: PlanResourcesFilter_Expression_Operand): unknown;
};
export declare const PlanResourcesOutput: {
    fromJSON(object: any): PlanResourcesOutput;
    toJSON(message: PlanResourcesOutput): unknown;
};
export declare const CheckInput: {
    fromJSON(object: any): CheckInput;
    toJSON(message: CheckInput): unknown;
};
export declare const CheckOutput: {
    fromJSON(object: any): CheckOutput;
    toJSON(message: CheckOutput): unknown;
};
export declare const CheckOutput_ActionEffect: {
    fromJSON(object: any): CheckOutput_ActionEffect;
    toJSON(message: CheckOutput_ActionEffect): unknown;
};
export declare const CheckOutput_ActionsEntry: {
    fromJSON(object: any): CheckOutput_ActionsEntry;
    toJSON(message: CheckOutput_ActionsEntry): unknown;
};
export declare const OutputEntry: {
    fromJSON(object: any): OutputEntry;
    toJSON(message: OutputEntry): unknown;
};
export declare const Resource: {
    fromJSON(object: any): Resource;
    toJSON(message: Resource): unknown;
};
export declare const Resource_AttrEntry: {
    fromJSON(object: any): Resource_AttrEntry;
    toJSON(message: Resource_AttrEntry): unknown;
};
export declare const Principal: {
    fromJSON(object: any): Principal;
    toJSON(message: Principal): unknown;
};
export declare const Principal_AttrEntry: {
    fromJSON(object: any): Principal_AttrEntry;
    toJSON(message: Principal_AttrEntry): unknown;
};
export declare const AuxData: {
    fromJSON(object: any): AuxData;
    toJSON(message: AuxData): unknown;
};
export declare const AuxData_JwtEntry: {
    fromJSON(object: any): AuxData_JwtEntry;
    toJSON(message: AuxData_JwtEntry): unknown;
};
//# sourceMappingURL=engine.d.ts.map