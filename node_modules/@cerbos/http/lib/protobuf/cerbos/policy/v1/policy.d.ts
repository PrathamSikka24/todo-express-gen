import { Effect } from "../../effect/v1/effect";
export declare const protobufPackage = "cerbos.policy.v1";
export interface Policy {
    apiVersion: string;
    disabled: boolean;
    description: string;
    metadata: Metadata | undefined;
    policyType?: {
        $case: "resourcePolicy";
        resourcePolicy: ResourcePolicy;
    } | {
        $case: "principalPolicy";
        principalPolicy: PrincipalPolicy;
    } | {
        $case: "derivedRoles";
        derivedRoles: DerivedRoles;
    } | {
        $case: "exportVariables";
        exportVariables: ExportVariables;
    } | undefined;
    variables: {
        [key: string]: string;
    };
    jsonSchema: string;
}
export interface Policy_VariablesEntry {
    key: string;
    value: string;
}
export interface SourceAttributes {
    attributes: {
        [key: string]: any | undefined;
    };
}
export interface SourceAttributes_AttributesEntry {
    key: string;
    value: any | undefined;
}
export interface Metadata {
    sourceFile: string;
    annotations: {
        [key: string]: string;
    };
    hash: string | undefined;
    storeIdentifer: string;
    storeIdentifier: string;
    sourceAttributes: SourceAttributes | undefined;
}
export interface Metadata_AnnotationsEntry {
    key: string;
    value: string;
}
export interface ResourcePolicy {
    resource: string;
    version: string;
    importDerivedRoles: string[];
    rules: ResourceRule[];
    scope: string;
    schemas: Schemas | undefined;
    variables: Variables | undefined;
}
export interface ResourceRule {
    actions: string[];
    derivedRoles: string[];
    roles: string[];
    condition: Condition | undefined;
    effect: Effect;
    name: string;
    output: Output | undefined;
}
export interface PrincipalPolicy {
    principal: string;
    version: string;
    rules: PrincipalRule[];
    scope: string;
    variables: Variables | undefined;
}
export interface PrincipalRule {
    resource: string;
    actions: PrincipalRule_Action[];
}
export interface PrincipalRule_Action {
    action: string;
    condition: Condition | undefined;
    effect: Effect;
    name: string;
    output: Output | undefined;
}
export interface DerivedRoles {
    name: string;
    definitions: RoleDef[];
    variables: Variables | undefined;
}
export interface RoleDef {
    name: string;
    parentRoles: string[];
    condition: Condition | undefined;
}
export interface ExportVariables {
    name: string;
    definitions: {
        [key: string]: string;
    };
}
export interface ExportVariables_DefinitionsEntry {
    key: string;
    value: string;
}
export interface Variables {
    import: string[];
    local: {
        [key: string]: string;
    };
}
export interface Variables_LocalEntry {
    key: string;
    value: string;
}
export interface Condition {
    condition?: {
        $case: "match";
        match: Match;
    } | {
        $case: "script";
        script: string;
    } | undefined;
}
export interface Match {
    op?: {
        $case: "all";
        all: Match_ExprList;
    } | {
        $case: "any";
        any: Match_ExprList;
    } | {
        $case: "none";
        none: Match_ExprList;
    } | {
        $case: "expr";
        expr: string;
    } | undefined;
}
export interface Match_ExprList {
    of: Match[];
}
export interface Output {
    expr: string;
    when: Output_When | undefined;
}
export interface Output_When {
    ruleActivated: string;
    conditionNotMet: string;
}
export interface Schemas {
    principalSchema: Schemas_Schema | undefined;
    resourceSchema: Schemas_Schema | undefined;
}
export interface Schemas_IgnoreWhen {
    actions: string[];
}
export interface Schemas_Schema {
    ref: string;
    ignoreWhen: Schemas_IgnoreWhen | undefined;
}
export declare const Policy: {
    fromJSON(object: any): Policy;
    toJSON(message: Policy): unknown;
};
export declare const Policy_VariablesEntry: {
    fromJSON(object: any): Policy_VariablesEntry;
    toJSON(message: Policy_VariablesEntry): unknown;
};
export declare const SourceAttributes: {
    fromJSON(object: any): SourceAttributes;
    toJSON(message: SourceAttributes): unknown;
};
export declare const SourceAttributes_AttributesEntry: {
    fromJSON(object: any): SourceAttributes_AttributesEntry;
    toJSON(message: SourceAttributes_AttributesEntry): unknown;
};
export declare const Metadata: {
    fromJSON(object: any): Metadata;
    toJSON(message: Metadata): unknown;
};
export declare const Metadata_AnnotationsEntry: {
    fromJSON(object: any): Metadata_AnnotationsEntry;
    toJSON(message: Metadata_AnnotationsEntry): unknown;
};
export declare const ResourcePolicy: {
    fromJSON(object: any): ResourcePolicy;
    toJSON(message: ResourcePolicy): unknown;
};
export declare const ResourceRule: {
    fromJSON(object: any): ResourceRule;
    toJSON(message: ResourceRule): unknown;
};
export declare const PrincipalPolicy: {
    fromJSON(object: any): PrincipalPolicy;
    toJSON(message: PrincipalPolicy): unknown;
};
export declare const PrincipalRule: {
    fromJSON(object: any): PrincipalRule;
    toJSON(message: PrincipalRule): unknown;
};
export declare const PrincipalRule_Action: {
    fromJSON(object: any): PrincipalRule_Action;
    toJSON(message: PrincipalRule_Action): unknown;
};
export declare const DerivedRoles: {
    fromJSON(object: any): DerivedRoles;
    toJSON(message: DerivedRoles): unknown;
};
export declare const RoleDef: {
    fromJSON(object: any): RoleDef;
    toJSON(message: RoleDef): unknown;
};
export declare const ExportVariables: {
    fromJSON(object: any): ExportVariables;
    toJSON(message: ExportVariables): unknown;
};
export declare const ExportVariables_DefinitionsEntry: {
    fromJSON(object: any): ExportVariables_DefinitionsEntry;
    toJSON(message: ExportVariables_DefinitionsEntry): unknown;
};
export declare const Variables: {
    fromJSON(object: any): Variables;
    toJSON(message: Variables): unknown;
};
export declare const Variables_LocalEntry: {
    fromJSON(object: any): Variables_LocalEntry;
    toJSON(message: Variables_LocalEntry): unknown;
};
export declare const Condition: {
    fromJSON(object: any): Condition;
    toJSON(message: Condition): unknown;
};
export declare const Match: {
    fromJSON(object: any): Match;
    toJSON(message: Match): unknown;
};
export declare const Match_ExprList: {
    fromJSON(object: any): Match_ExprList;
    toJSON(message: Match_ExprList): unknown;
};
export declare const Output: {
    fromJSON(object: any): Output;
    toJSON(message: Output): unknown;
};
export declare const Output_When: {
    fromJSON(object: any): Output_When;
    toJSON(message: Output_When): unknown;
};
export declare const Schemas: {
    fromJSON(object: any): Schemas;
    toJSON(message: Schemas): unknown;
};
export declare const Schemas_IgnoreWhen: {
    fromJSON(object: any): Schemas_IgnoreWhen;
    toJSON(message: Schemas_IgnoreWhen): unknown;
};
export declare const Schemas_Schema: {
    fromJSON(object: any): Schemas_Schema;
    toJSON(message: Schemas_Schema): unknown;
};
//# sourceMappingURL=policy.d.ts.map